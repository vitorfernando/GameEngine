#version 400 core

in vec2 pass_textureCoords;
in vec3 surfaceNormal;
in vec3 toLightVector;
in vec3 toCameraVector;

out vec4 out_Color;

uniform sampler2D modelTexture;
uniform vec3 lightColour;
uniform float reflectivity;
uniform float shineDamper;

void main(void){
	vec3 unitNormal = normalize(surfaceNormal);
	vec3 unitLightVector = normalize(toLightVector);
	vec3 unitVectorToCamera = normalize(toCameraVector);
	vec3 lightDirection = -unitVectorToCamera;
	vec3 reflectedLightDirection = reflect(lightDirection,unitNormal);
	
	float specularFactor = dot(reflectedLightDirection,unitVectorToCamera);
	specularFactor = max(specularFactor,0.0);
	float dampedFactor = pow(specularFactor,shineDamper);
	vec3 finalSpecular = dampedFactor * lightColour;
	 
	float nDot1 = dot(unitNormal,unitLightVector);
	float brightness = max(nDot1,0.2);
	vec3 diffuse = brightness * lightColour;
	
	out_Color = vec4(diffuse,1.0) * texture(modelTexture,pass_textureCoords) + vec4(finalSpecular,1.0);
}